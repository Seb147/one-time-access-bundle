{"name":"Onetimeaccessbundle","tagline":"Symfony2 security extension to allow One-Time access","body":"Berny\\OneTimeAccessBundle\r\n=========================\r\n\r\nDo you ever wanted to authenticate your users in a Symfony2 application through a *one-time access url*?\r\n\r\nSeek no more! This is your bundle! :D\r\n\r\nWhy I would want that?\r\n----------------------\r\n\r\nYou can use one-time access urls for:\r\n- Access to \"Forgot your password?\" forms\r\n- [Password-less systems](http://notes.xoxco.com/post/27999787765/is-it-time-for-password-less-login)\r\n\r\nFeatures\r\n--------\r\n\r\n- Customizable urls\r\n- User defined token generation and retrieval\r\n- Multiple firewalls\r\n\r\nCompatibility\r\n-------------\r\nTested under Symfony2 2.1.1 and 2.2.0\r\n\r\nInstallation\r\n------------\r\n### From [composer/packagist](https://getcomposer.org)\r\n- Add `\"berny/one-time-access-bundle\": \"*@dev\"` to your `composer.json` file\r\n\r\n### From [github](https://github.com)\r\n- [Download the code](https://github.com/xphere/OneTimeAccessBundle) to `YourBundleDirectory/Berny/OneTimeAccessBundle`\r\n- Add the bundle to your `AppKernel.php`\r\n\r\nUsage\r\n-----\r\nAdd a `one_time_access` key in any firewall with, at least, a `route`.\r\n\r\n```yml\r\nsecurity:\r\n    firewalls:\r\n        root:\r\n            one_time_access:\r\n                route: acme_myapp_ota\r\n```\r\n\r\nThe current user provider must implement `OneTimeAccessBundle\\Security\\Provider\\ProviderInterface`.\r\n\r\n```yml\r\nsecurity:\r\n    provider:\r\n        users:\r\n            entity:\r\n                # AcmeMyAppBundle:UserRepository implements ProviderInterface\r\n                class: AcmeMyAppBundle:User\r\n\r\n    firewalls:\r\n        root:\r\n            provider: users\r\n            one_time_access:\r\n                route: acme_myapp_ota\r\n```\r\n\r\nYou can set the `ota_provider` key to define a different service implementing the interface.\r\n\r\n```yml\r\nservices:\r\n    acme.myapp.ota.repository:\r\n        class: Acme\\\\MyAppSecurity\\\\UserProvider\r\n\r\nsecurity:\r\n    firewalls:\r\n        root:\r\n            one_time_access:\r\n                route: acme_myapp_ota\r\n                ota_provider: acme.myapp.ota.repository\r\n```\r\n\r\nBy default, `route` must have a `_token` parameter to extract the one-time access token.\r\n\r\n```yml\r\n    acme_myapp_ota:\r\n        pattern: ^/autologin/{_token}\r\n        defaults: { _controller: AcmeMyAppBundle:Login:oneTimeAccess }\r\n```\r\n\r\nThis can be customized with the `parameter` key.\r\n\r\n```yml\r\nsecurity:\r\n    firewalls:\r\n        root:\r\n            one_time_access:\r\n                route: acme_myapp_ota\r\n                parameter: otatoken\r\n```\r\n\r\nOf course, you can define your routes as always, using YAML, XML, annotations... you name it.\r\n\r\nToken generation\r\n----------------\r\nThis bundle doesn't cover token generation.\r\nIt's up to you to create unique tokens and link them to the user.\r\n\r\nThis could be part of a Doctrine implementation:\r\n```php\r\nclass OTARepository extends EntityRepository implements ProviderInterface\r\n{\r\n    public function generateOTA($user)\r\n    {\r\n        $token = md5($user->getUsername() . time());\r\n        $ota = new YourOneTimeAccessEntity($user, $token);\r\n        $this->getEntityManager()->persist($ota);\r\n        $this->getEntityManager()->flush($ota);\r\n        return $ota;\r\n    }\r\n\r\n    public function loadUserByOTA($token)\r\n    {\r\n        $ota = $this->findOneByToken($token);\r\n        if ($ota) {\r\n            // Remember, user must be defined as EAGER in OTAEntity\r\n            return $ota->getUser();\r\n        }\r\n    }\r\n\r\n    public function invalidateByOTA($token)\r\n    {\r\n        $ota = $this->findOneByToken($token);\r\n        $this->getEntityManager()->remove($ota);\r\n        $this->getEntityManager()->flush();\r\n    }\r\n}\r\n```\r\n\r\nRoute generation\r\n----------------\r\nRoute generation is up to you too. Yes!\r\nAre we being lazy, you say? Nope!\r\nThis means FULLY CUSTOMIZABLE routes for your one-time access links.\r\n\r\nFor example:\r\n```php\r\n$ota = $oneTimeAccessRepository->generateOnetimeAccess($user);\r\n$url = $this->generateUrl('acme_myapp_ota', array(\r\n    '_token' => $ota->getToken(),\r\n));\r\n```\r\n","google":"UA-39572662-1","note":"Don't delete this file! It's used internally to help with page regeneration."}